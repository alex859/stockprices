//package pricesprovider
//
//import (
//	"errors"
//	"reflect"
//	"testing"
//	"time"
//
//	"github.com/stretchr/testify/assert"
//	"org.alex859/stockprices/domain"
//	"org.alex859/stockprices/usecases"
//	"org.alex859/stockprices/usecases/mocks"
//)
//
//func Test_WHEN_CantGetCached_THEN_ReturnLivePrices(t *testing.T) {
//	pricesProvider := &mocks.PricesProviderMock{}
//	cachedPricesProvider := &mocks.PricesProviderMock{}
//	providerUT := NewDefaultPricesProvider(cachedPricesProvider, pricesProvider)
//	var may5, _ = time.Parse("02-01-2006", "05-05-2018")
//	var may9, _ = time.Parse("02-01-2006", "09-05-2018")
//	ppMay5 := domain.PricePoint{Price: 123, Time: may5}
//	ppMay9 := domain.PricePoint{Price: 123, Time: may9}
//	ticker := domain.Ticker{Market: "LON", Symbol: "ANP"}
//	expected := &domain.PriceHistory{
//		Ticker: ticker, Currency: "GBX", LastPrice: 125, LastPriceTime: "last time", Name: "Anpario",
//		Prices: domain.PriceList{ppMay5, ppMay9},
//	}
//	interval, err := domain.NewDateInterval(may5, may9)
//	cachedPricesProvider.On("FetchPrices", ticker, interval).Return(nil, errors.New("error"))
//	pricesProvider.On("FetchPrices", ticker, interval).Return(expected, nil)
//	result, err := providerUT.FetchPrices(ticker, interval)
//
//	if assert.NoError(t, err) {
//		assert.Equal(t, expected, result)
//	}
//	cachedPricesProvider.AssertCalled(t, "FetchPrices", ticker, interval)
//}
//
//func Test_WHEN_CanGetCached_THEN_ReturnCachedPrices(t *testing.T) {
//	pricesProvider := &mocks.PricesProviderMock{}
//	cachedPricesProvider := &mocks.PricesProviderMock{}
//	providerUT := NewDefaultPricesProvider(cachedPricesProvider, pricesProvider)
//	var may5, _ = time.Parse("02-01-2006", "05-05-2018")
//	var may9, _ = time.Parse("02-01-2006", "09-05-2018")
//	ppMay5 := domain.PricePoint{Price: 123, Time: may5}
//	ppMay9 := domain.PricePoint{Price: 123, Time: may9}
//	ticker := domain.Ticker{Market: "LON", Symbol: "ANP"}
//	expected := &domain.PriceHistory{
//		Ticker: ticker, Currency: "GBX", LastPrice: 125, LastPriceTime: "last time", Name: "Anpario",
//		Prices: domain.PriceList{ppMay5, ppMay9},
//	}
//	interval, err := domain.NewDateInterval(may5, may9)
//	cachedPricesProvider.On("FetchPrices", ticker, interval).Return(expected, nil)
//	pricesProvider.On("FetchPrices", ticker, interval).Return(expected, nil)
//
//	result, err := providerUT.FetchPrices(ticker, interval)
//
//	if assert.NoError(t, err) {
//		assert.Equal(t, expected, result)
//	}
//	pricesProvider.AssertNotCalled(t, "FetchPrices", ticker, interval)
//}
//
//func Test_WHEN_CanGetCachedAndLive_THEN_ReturnError(t *testing.T) {
//	pricesProvider := &mocks.PricesProviderMock{}
//	cachedPricesProvider := &mocks.PricesProviderMock{}
//	providerUT := NewDefaultPricesProvider(cachedPricesProvider, pricesProvider)
//	var may5, _ = time.Parse("02-01-2006", "05-05-2018")
//	var may9, _ = time.Parse("02-01-2006", "09-05-2018")
//	ticker := domain.Ticker{Market: "LON", Symbol: "ANP"}
//
//	interval, err := domain.NewDateInterval(may5, may9)
//	cachedPricesProvider.On("FetchPrices", ticker, interval).Return(nil, errors.New("error"))
//	pricesProvider.On("FetchPrices", ticker, interval).Return(nil, errors.New("another error"))
//
//	result, err := providerUT.FetchPrices(ticker, interval)
//
//	cachedPricesProvider.AssertCalled(t, "FetchPrices", ticker, interval)
//	pricesProvider.AssertCalled(t, "FetchPrices", ticker, interval)
//
//	assert.Nil(t, result)
//	assert.Error(t, err)
//}
//
//func TestNewDefaultPricesProvider(t *testing.T) {
//	type args struct {
//		cachedPricesProvider usecases.PricesProvider
//		pricesProvider       usecases.PricesProvider
//		saver                PricesSaver
//	}
//	tests := []struct {
//		name string
//		args args
//		want *defaultPricesProvider
//	}{
//		// TODO: Add test cases.
//	}
//	for _, tt := range tests {
//		t.Run(tt.name, func(t *testing.T) {
//			if got := NewDefaultPricesProvider(tt.args.cachedPricesProvider, tt.args.pricesProvider, tt.args.saver); !reflect.DeepEqual(got, tt.want) {
//				t.Errorf("NewDefaultPricesProvider() = %v, want %v", got, tt.want)
//			}
//		})
//	}
//}
//
//func Test_defaultPricesProvider_FetchPrices(t *testing.T) {
//	type args struct {
//		ticker   domain.Ticker
//		interval *domain.DateInterval
//	}
//	tests := []struct {
//		name    string
//		dpp     *defaultPricesProvider
//		args    args
//		want    *domain.PriceHistory
//		wantErr bool
//	}{
//		// TODO: Add test cases.
//	}
//	for _, tt := range tests {
//		t.Run(tt.name, func(t *testing.T) {
//			got, err := tt.dpp.FetchPrices(tt.args.ticker, tt.args.interval)
//			if (err != nil) != tt.wantErr {
//				t.Errorf("defaultPricesProvider.FetchPrices() error = %v, wantErr %v", err, tt.wantErr)
//				return
//			}
//			if !reflect.DeepEqual(got, tt.want) {
//				t.Errorf("defaultPricesProvider.FetchPrices() = %v, want %v", got, tt.want)
//			}
//		})
//	}
//}
